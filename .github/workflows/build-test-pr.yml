name: PR BuildAndTest.CI
on:
  push:
    branches: [ main ]
    tags:
      - '*'
  pull_request:
    branches: [ main ]

env:
  pythonVersion: 3.7

jobs:
  test-python:
    runs-on: ubuntu-latest
    env:
      COVERAGE_SINGLE: 60
      COVERAGE_TOTAL: 60
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r run_requirements.txt
          pip install -r test_requirements.txt

      - name: flake8
        run: flake8 . --count --exit-zero --statistics

      - name: mypy
        run: |
          mypy setup.py
          mypy -p src
          mypy -p tests

      - name: Test with pytest
        run: pytest --cov=src --cov-report=html tests

      - name: Archive code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: htmlcov/*

      - name: Merge requirements file for coverage tool
        run: cat run_requirements test_requirements > requirements.txt

      - name: pytest
        id: pytester-cov
        uses: alexanderdamiani/pytester-cov@v1.2.0
        with:
          pytest-root-dir: 'src'
          pytest-tests-dir: 'tests'
          requirements-file: 'requirements.txt'
          cov-omit-list: 'tests/*'
          cov-threshold-single: ${{ env.COVERAGE_SINGLE }}
          cov-threshold-total: ${{ env.COVERAGE_TOTAL }}

      - name: Coverage single fail - exit
        if: ${{ steps.pytester-cov.outputs.cov-threshold-single-fail == 'true' }}
        run: |
          echo "cov single fail ${{ steps.pytester-cov.outputs.cov-threshold-single-fail }}"
          exit 1

      - name: Coverage total fail - exit
        if: ${{ steps.pytester-cov.outputs.cov-threshold-total-fail == 'true' }}
        run: |
          echo "cov single fail ${{ steps.pytester-cov.outputs.cov-threshold-total-fail }}"
          exit 1

      - name: Commit pytest coverage table
        uses: peter-evans/commit-comment@v1
        with:
          body: ${{ steps.pytester-cov.outputs.output-table }}

  build-python:
    runs-on: ubuntu-latest
    needs: [test-python]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r build_requirements.txt

      - name: Build Distribution
        run: python setup.py sdist bdist_wheel

      - name: Archive TestPyPI version
        uses: actions/upload-artifact@v2
        with:
          name: latest_version
          path: latest_version.txt

      - name: Upload Distribution
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist/*

  test-artifact-pkg:
    runs-on: ubuntu-latest
    needs: [build-python]
    strategy:
      matrix:
        packageName: [ '*.whl', '*.tar.gz' ]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Download Distribution
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: List contents of dist
        run: ls -al dist

      - name: Set env
        run: echo "wheel_filename=$(find dist -name ${{ matrix.packageName }})" >> $GITHUB_ENV

      - name: Test env
        run: echo $wheel_filename

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r test_requirements.txt

      - name: Install artifact
        run:
          pip install $wheel_filename

      - name: Test with pytest
        run: pytest tests

  publish-testpypi-pkg:
    runs-on: ubuntu-latest
    needs: [test-artifact-pkg]
    if: "!startsWith(github.ref, 'refs/tags')"
    steps:
      - name: Download Distribution
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Publish package to TestPyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.TEST_PIPY_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          verbose: true

  test-testpypi-pkg:
    runs-on: ubuntu-latest
    needs: [publish-testpypi-pkg]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Download TestPyPI version artifact
        uses: actions/download-artifact@v2
        with:
          name: latest_version

      - name: Get TestPyPI version
        run: |
          latest_version=$(cat ./latest_version.txt)
          echo $latest_version
          echo "latest_version=$latest_version" >> $GITHUB_ENV

      - name: Install test package
        run: |
          python -m pip install --upgrade pip

          while ! pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple hi-ml==${{ env.latest_version }}
          do
            echo waiting for test.pypi
            sleep 10
          done

      - name: Install test dependencies
        run: |
          pip install -r test_requirements.txt

      - name: Test with pytest
        run: pytest tests

  publish-pypi-pkg:
    runs-on: ubuntu-latest
    needs: [test-artifact-pkg]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Download Distribution
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}

  test-pypi-pkg:
    runs-on: ubuntu-latest
    needs: [publish-pypi-pkg]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Download PyPI version artifact
        uses: actions/download-artifact@v2
        with:
          name: latest_version

      - name: Get PyPI version
        run: |
          latest_version=$(cat ./latest_version.txt)
          echo $latest_version
          echo "latest_version=$latest_version" >> $GITHUB_ENV

      - name: Install package
        run: |
          python -m pip install --upgrade pip

          while ! pip install hi-ml==${{ env.latest_version }}
          do
            echo waiting for pypi
            sleep 10
          done

      - name: Install test dependencies
        run: |
          pip install -r test_requirements.txt

      - name: Test with pytest
        run: pytest tests
