name: PR BuildAndTest.CI
on:
  push:
    branches: [ main ]
    tags:
      - '*'
  pull_request:
    branches: [ main ]

env:
  pythonVersion: 3.7
  HIML_TENANT_ID: ${{ secrets.HIML_TENANT_ID }}
  HIML_RESOURCE_GROUP: ${{ secrets.HIML_RESOURCE_GROUP }}
  HIML_SUBSCRIPTION_ID: ${{ secrets.HIML_SUBSCRIPTION_ID }}
  HIML_WORKSPACE_NAME: ${{ secrets.HIML_WORKSPACE_NAME }}
  HIML_SERVICE_PRINCIPAL_ID: ${{ secrets.HIML_SERVICE_PRINCIPAL_ID }}
  HIML_SERVICE_PRINCIPAL_PASSWORD: ${{ secrets.HIML_SERVICE_PRINCIPAL_PASSWORD }}
  HIML_DIST_ARTIFACT_SUFFIX: '-dist'
  HIML_PACKAGE_NAME_ARTIFACT_SUFFIX: '-package_name'
  HIML_VERSION_ARTIFACT_SUFFIX: '-latest_version'
  HIML_COV_ARTIFACT_SUFFIX: '-code_coverage_report'

jobs:
  flake8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: flake8
        run: make flake8

  mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: mypy
        run: make mypy

  pytest_fast:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder:  [hi-ml, hi-ml-azure ]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Test with pytest, fast only
        run: |
          cd ${{ matrix.folder }}

          # Install local package in editable mode
          make pip_local

          # Run fast tests
          make pytest_fast

  build-python:
    runs-on: ubuntu-latest
    needs: [pytest_fast]
    strategy:
      matrix:
        folder: [ hi-ml, hi-ml-azure ]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Build Distribution
        run: |
          cd ${{ matrix.folder }}
          make build

      - name: Upload distribution artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.folder }}${{ env.HIML_DIST_ARTIFACT_SUFFIX }}
          path: ${{ matrix.folder }}/dist/*

      - name: Upload package name artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.folder }}${{ env.HIML_PACKAGE_NAME_ARTIFACT_SUFFIX }}
          path: ${{ matrix.folder }}/package_name.txt

      - name: Upload version artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.folder }}${{ env.HIML_VERSION_ARTIFACT_SUFFIX }}
          path: ${{ matrix.folder }}/latest_version.txt

  test-artifact-pkg:
    runs-on: ubuntu-latest
    needs: [build-python]
    strategy:
      matrix:
        folder: [ hi-ml, hi-ml-azure ]
        packageName: [ '*.whl', '*.tar.gz' ]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Download distribution artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.folder }}${{ env.HIML_DIST_ARTIFACT_SUFFIX }}
          path: ${{ matrix.folder }}/dist

      - name: Set envs
        run: |
          cd ${{ matrix.folder }}

          # Set env var HIML_AZURE_WHEEL_FILENAME, used in test_himl.py to identify package
          echo "HIML_AZURE_WHEEL_FILENAME=$(find dist -name ${{ matrix.packageName }})" >> $GITHUB_ENV

      - name: Install artifact and test
        run: |
          cd ${{ matrix.folder }}

          make pip_upgrade

          # Install package
          pip install ${{ env.HIML_AZURE_WHEEL_FILENAME }}

          if [ ${{ matrix.packageName }} = '*.whl' ]; then
            # Test with pytest
            make pytest_and_coverage
          else
            # Test with pytest, fast only
            make pytest_fast
          fi

      - name: Add coverage as a commit comment
        uses: ./.github/actions/format_coverage
        if: ${{ matrix.packageName == '*.whl' }}
        with:
          file: '${{ matrix.folder }}/coverage.txt'

      - name: Archive code coverage results
        uses: actions/upload-artifact@v2
        if: ${{ matrix.packageName == '*.whl' }}
        with:
          name: ${{ matrix.folder }}${{ env.HIML_COV_ARTIFACT_SUFFIX }}
          path: ${{ matrix.folder }}/htmlcov/*

  publish-testpypi-pkg:
    runs-on: ubuntu-latest
    needs: [test-artifact-pkg]
    if: "!startsWith(github.ref, 'refs/tags/v')"
    strategy:
      matrix:
        folder: [ hi-ml, hi-ml-azure ]
    steps:
      - name: Download distribution artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.folder }}${{ env.HIML_DIST_ARTIFACT_SUFFIX }}
          path: ${{ matrix.folder }}/dist

      - name: Download package name artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.folder }}${{ env.HIML_PACKAGE_NAME_ARTIFACT_SUFFIX }}
          path: ${{ matrix.folder }}

      - name: Download version artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.folder }}${{ env.HIML_VERSION_ARTIFACT_SUFFIX }}
          path: ${{ matrix.folder }}

      - name: Set envs
        run: |
          cd ${{ matrix.folder }}

          if [ ${{ matrix.folder }} = 'hi-ml' ]; then
            echo "TESTPYPI_TOKEN=${{ secrets.TEST_PIPY_TOKEN }}" >> $GITHUB_ENV
          elif [ ${{ matrix.folder }} = 'hi-ml-azure' ]; then
            echo "TESTPYPI_TOKEN=${{ secrets.PYPI_TEST_AZURE_TOKEN }}" >> $GITHUB_ENV
          fi

          echo "HIML_PACKAGE_NAME=$(cat ./package_name.txt)" >> $GITHUB_ENV
          echo "HIML_AZURE_PYPI_VERSION=$(cat ./latest_version.txt)" >> $GITHUB_ENV

      - name: Publish package to TestPyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ env.TESTPYPI_TOKEN }}
          packages_dir: ${{ matrix.folder }}/dist/
          repository_url: https://test.pypi.org/legacy/
          verbose: true

      - name: Show published TestPyPI package version
        run: |
          echo "Install this package version via:"
          echo "pip install --extra-index-url https://test.pypi.org/simple ${{ env.HIML_PACKAGE_NAME }}==${{ env.HIML_AZURE_PYPI_VERSION }}"

  test-testpypi-pkg-pip:
    runs-on: ubuntu-latest
    needs: [publish-testpypi-pkg]
    strategy:
      matrix:
        folder: [ hi-ml, hi-ml-azure ]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Download distribution artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.folder }}${{ env.HIML_DIST_ARTIFACT_SUFFIX }}
          path: ${{ matrix.folder }}/dist

      - name: Download package name artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.folder }}${{ env.HIML_PACKAGE_NAME_ARTIFACT_SUFFIX }}
          path: ${{ matrix.folder }}

      - name: Download version artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.folder }}${{ env.HIML_VERSION_ARTIFACT_SUFFIX }}
          path: ${{ matrix.folder }}

      - name: Set envs
        run: |
          cd ${{ matrix.folder }}

          # Set env var HIML_AZURE_WHEEL_FILENAME, used in test_himl.py to identify package
          echo "HIML_AZURE_WHEEL_FILENAME=$(find dist -name *.whl)" >> $GITHUB_ENV

          echo "HIML_PACKAGE_NAME=$(cat ./package_name.txt)" >> $GITHUB_ENV
          echo "HIML_AZURE_PYPI_VERSION=$(cat ./latest_version.txt)" >> $GITHUB_ENV

      - name: Install and test package
        run: |
          cd ${{ matrix.folder }}

          make pip_upgrade

          while ! pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple ${{ env.HIML_PACKAGE_NAME }}==${{ env.HIML_AZURE_PYPI_VERSION }}
          do
            echo waiting for test.pypi
            sleep 10
          done

          # Test with pytest, fast only
          make pytest_fast

  test-testpypi-pkg-conda:
    runs-on: ubuntu-latest
    needs: [publish-testpypi-pkg]
    strategy:
      matrix:
        folder: [ hi-ml, hi-ml-azure ]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Download package name artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.folder }}${{ env.HIML_PACKAGE_NAME_ARTIFACT_SUFFIX }}
          path: ${{ matrix.folder }}

      - name: Download version artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.folder }}${{ env.HIML_VERSION_ARTIFACT_SUFFIX }}
          path: ${{ matrix.folder }}

      - name: Set envs
        run: |
          cd ${{ matrix.folder }}

          echo "HIML_PACKAGE_NAME=$(cat ./package_name.txt)" >> $GITHUB_ENV
          echo "HIML_AZURE_PYPI_VERSION=$(cat ./latest_version.txt)" >> $GITHUB_ENV

      - name: Install test.PyPI package and test with Conda
        run: |
          cd ${{ matrix.folder }}

          # Set up conda environment
          $CONDA/bin/conda env update --file ../test_environment.yml --name base

          # Install test package
          while ! $CONDA/bin/pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple ${{ env.HIML_PACKAGE_NAME }}==${{ env.HIML_AZURE_PYPI_VERSION }}
          do
            echo waiting for test.pypi
            sleep 10
          done

          $CONDA/bin/pytest -m fast testhiml

  publish-pypi-pkg:
    runs-on: ubuntu-latest
    needs: [test-artifact-pkg]
    strategy:
      matrix:
        folder: [ hi-ml, hi-ml-azure ]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download distribution artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.folder }}${{ env.HIML_DIST_ARTIFACT_SUFFIX }}
          path: ${{ matrix.folder }}/dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@master
        if: ${{ matrix.folder == 'hi-ml' }}
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          packages_dir: ${{ matrix.folder }}/dist/

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@master
        if: ${{ matrix.folder == 'hi-ml-azure' }}
        with:
          user: __token__
          password: ${{ secrets.PYPI_AZURE_TOKEN }}
          packages_dir: ${{ matrix.folder }}/dist/

  test-pypi-pkg:
    runs-on: ubuntu-latest
    needs: [publish-pypi-pkg]
    strategy:
      matrix:
        folder: [ hi-ml, hi-ml-azure ]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Download package name artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.folder }}${{ env.HIML_PACKAGE_NAME_ARTIFACT_SUFFIX }}
          path: ${{ matrix.folder }}

      - name: Download version artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.folder }}${{ env.HIML_VERSION_ARTIFACT_SUFFIX }}
          path: ${{ matrix.folder }}

      - name: Set envs
        run: |
          cd ${{ matrix.folder }}

          echo "HIML_PACKAGE_NAME=$(cat ./package_name.txt)" >> $GITHUB_ENV
          echo "HIML_AZURE_PYPI_VERSION=$(cat ./latest_version.txt)" >> $GITHUB_ENV

      - name: Install PyPI package and test
        run: |
          cd ${{ matrix.folder }}

          make pip_upgrade

          while ! pip install ${{ env.HIML_PACKAGE_NAME }}==${{ env.HIML_AZURE_PYPI_VERSION }}
          do
            echo waiting for pypi
            sleep 10
          done

          # Test with pytest, fast only
          make pytest_fast
