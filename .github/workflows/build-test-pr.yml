name: PR BuildAndTest.CI
on:
  push:
    branches: [ main ]
    tags:
      - '*'
  pull_request:
    branches: [ main ]

env:
  pythonVersion: 3.7
  HIML_TENANT_ID: ${{ secrets.HIML_TENANT_ID }}
  HIML_RESOURCE_GROUP: ${{ secrets.HIML_RESOURCE_GROUP }}
  HIML_SUBSCRIPTION_ID: ${{ secrets.HIML_SUBSCRIPTION_ID }}
  HIML_WORKSPACE_NAME: ${{ secrets.HIML_WORKSPACE_NAME }}
  HIML_SERVICE_PRINCIPAL_ID: ${{ secrets.HIML_SERVICE_PRINCIPAL_ID }}
  HIML_SERVICE_PRINCIPAL_PASSWORD: ${{ secrets.HIML_SERVICE_PRINCIPAL_PASSWORD }}

jobs:
  flake8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r run_requirements.txt
          pip install -r test_requirements.txt

      - name: flake8
        run: flake8 --count --statistics --config=.flake8 .

  mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r run_requirements.txt
          pip install -r test_requirements.txt

      - name: mypy
        run: python mypy_runner.py

  pytest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r run_requirements.txt
          pip install -r test_requirements.txt
          pip install -e .

      - name: Test with pytest, fast only
        run: pytest -m fast testhiml

  build-python:
    runs-on: ubuntu-latest
    needs: [flake8, mypy, pytest]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r build_requirements.txt

      - name: Build Distribution
        run: python setup.py sdist bdist_wheel

      - name: Archive TestPyPI version
        uses: actions/upload-artifact@v2
        with:
          name: latest_version
          path: latest_version.txt

      - name: Upload Distribution
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist/*

  test-artifact-pkg:
    runs-on: ubuntu-latest
    needs: [build-python]
    strategy:
      matrix:
        packageName: [ '*.whl', '*.tar.gz' ]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Download Distribution
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: List contents of dist
        run: ls -al dist

      - name: Set env
        run: echo "HIML_WHEEL_FILENAME=$(find dist -name ${{ matrix.packageName }})" >> $GITHUB_ENV

      - name: Test env
        run: echo $HIML_WHEEL_FILENAME

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r test_requirements.txt

      - name: Install artifact
        run:
          pip install $HIML_WHEEL_FILENAME

      - name: Test with pytest, fast only
        run: pytest -m fast testhiml

  publish-testpypi-pkg:
    runs-on: ubuntu-latest
    needs: [test-artifact-pkg]
    if: "!startsWith(github.ref, 'refs/tags')"
    steps:
      - name: Download Distribution
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Publish package to TestPyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.TEST_PIPY_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          verbose: true

      - name: Download TestPyPI version artifact
        uses: actions/download-artifact@v2
        with:
          name: latest_version

      - name: Show published TestPyPI package version
        run: |
          latest_version=$(cat ./latest_version.txt)
          echo "Install this package version via:"
          echo "pip install --extra-index-url https://test.pypi.org/simple hi-ml==$latest_version"

  test-testpypi-pkg-pip:
    runs-on: ubuntu-latest
    needs: [publish-testpypi-pkg]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Download TestPyPI version artifact
        uses: actions/download-artifact@v2
        with:
          name: latest_version

      - name: Get TestPyPI version
        run: |
          latest_version=$(cat ./latest_version.txt)
          echo $latest_version
          echo "HIML_TEST_PYPI_VERSION=$latest_version" >> $GITHUB_ENV

      - name: Download Distribution
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Set env
        run: echo "HIML_WHEEL_FILENAME=$(find dist -name *.whl)" >> $GITHUB_ENV

      - name: Test env
        run: echo $HIML_WHEEL_FILENAME

      - name: Install test package
        run: |
          python -m pip install --upgrade pip

          while ! pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple hi-ml==${{ env.HIML_TEST_PYPI_VERSION }}
          do
            echo waiting for test.pypi
            sleep 10
          done

      - name: Install test dependencies
        run: |
          pip install -r test_requirements.txt

      - name: Test with pytest
        run: pytest --cov=health --cov-branch --cov-report=html --cov-report=term-missing --cov-report=xml testhiml

      - name: Format coverage summary
        run: pycobertura show --format text --output coverage.txt coverage.xml

      - name: Add coverage as a commit comment
        uses: actions/github-script@v4
        with:
          script: |
            const { promises: fs } = require('fs')

            const sha = context.eventName == 'pull_request' ? context.payload.pull_request.head.sha : context.sha

            const coverage = await fs.readFile('./coverage.txt', 'utf8')

            var table = ""
            const coverage_lines = coverage.split("\n")
            for (var i = 0; i < coverage_lines.length; i++)
            {
              const cells = coverage_lines[i].split(" ")
              var row = ""
              for (var j = 0; j < cells.length; j++)
              {
                if (cells[j] != "")
                {
                  if (row.length != "")
                  {
                    row += "|"
                  }
                  row += cells[j]
                }
              }
              if (row != "")
              {
                table += row + "\n"
              }
            }

            await github.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: sha,
              body: table
            })

      - name: Archive code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: htmlcov/*

  test-testpypi-pkg-conda:
    runs-on: ubuntu-latest
    needs: [publish-testpypi-pkg]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up conda environment
        run: |
          $CONDA/bin/conda env update --file test_environment.yml --name base

      - name: Download TestPyPI version artifact
        uses: actions/download-artifact@v2
        with:
          name: latest_version

      - name: Get TestPyPI version
        run: |
          latest_version=$(cat ./latest_version.txt)
          echo $latest_version
          echo "HIML_TEST_PYPI_VERSION=$latest_version" >> $GITHUB_ENV

      - name: Download Distribution
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Set env
        run: echo "HIML_WHEEL_FILENAME=$(find dist -name *.whl)" >> $GITHUB_ENV

      - name: Test env
        run: echo $HIML_WHEEL_FILENAME

      - name: Install test package
        run: |
          while ! $CONDA/bin/pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple hi-ml==${{ env.HIML_TEST_PYPI_VERSION }}
          do
            echo waiting for test.pypi
            sleep 10
          done

      - name: Test with pytest
        run: $CONDA/bin/pytest testhiml

  publish-pypi-pkg:
    runs-on: ubuntu-latest
    needs: [test-artifact-pkg]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Download Distribution
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}

  test-pypi-pkg:
    runs-on: ubuntu-latest
    needs: [publish-pypi-pkg]
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Set up Python ${{ env.pythonVersion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.pythonVersion }}

      - name: Download PyPI version artifact
        uses: actions/download-artifact@v2
        with:
          name: latest_version

      - name: Get PyPI version
        run: |
          latest_version=$(cat ./latest_version.txt)
          echo $latest_version
          echo "HIML_PYPI_VERSION=$latest_version" >> $GITHUB_ENV

      - name: Install package
        run: |
          python -m pip install --upgrade pip

          while ! pip install hi-ml==${{ env.HIML_PYPI_VERSION }}
          do
            echo waiting for pypi
            sleep 10
          done

      - name: Install test dependencies
        run: |
          pip install -r test_requirements.txt

      - name: Test with pytest, fast only
        run: pytest -m fast testhiml
