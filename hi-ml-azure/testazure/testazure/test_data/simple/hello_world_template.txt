#! /usr/bin/env python

#  ------------------------------------------------------------------------------------------
#  Copyright (c) Microsoft Corporation. All rights reserved.
#  Licensed under the MIT License (MIT). See LICENSE in the repo root for license information.
#  ------------------------------------------------------------------------------------------

"""
THIS FILE IS AUTO GENERATED. DO NOT EDIT THIS, EDIT THE TEMPLATE.

Simple 'hello world' script to elevate to AML using our `submit_to_azure_if_needed` function.
"""
import pkg_resources

from argparse import ArgumentParser
from pathlib import Path

from health_azure import DatasetConfig, submit_to_azure_if_needed
from health_azure.utils import WORKSPACE_CONFIG_JSON
{{ imports }}

try:
    hi_ml_dist = pkg_resources.get_distribution("hi-ml-azure")
    print(f"hi_ml_dist, location: {hi_ml_dist.location}, version: {hi_ml_dist.version}")
except pkg_resources.DistributionNotFound:
    import inspect
    print(f"hi_ml_dist, location: {inspect.getfile(submit_to_azure_if_needed)}, version: unknown, local src")


here = Path(__file__).parent.resolve()


def main() -> None:
    """
    Write out the given message, in an AzureML 'experiment' if required.
    """
    {{ prequel }}
    run_info = submit_to_azure_if_needed(
        compute_cluster_name={{ compute_cluster_name }},
        entry_script={{ entry_script }},
        aml_workspace={{ aml_workspace }},
        workspace_config_file={{ workspace_config_file }},
        snapshot_root_directory={{ snapshot_root_directory }},
        conda_environment_file={{ conda_environment_file }},
        environment_variables={{ environment_variables }},
        pip_extra_index_url={{ pip_extra_index_url }},
        private_pip_wheel_path={{ private_pip_wheel_path }},
        ignored_folders={{ ignored_folders }},
        default_datastore={{ default_datastore }},
        input_datasets={{ input_datasets }},
        output_datasets={{ output_datasets }},
        wait_for_completion={{ wait_for_completion }},
        wait_for_completion_show_output={{ wait_for_completion_show_output }},
        tags={{ tags }},
        submit_to_azureml={{ submit_to_azureml}},
        strictly_aml_v1={{ strictly_aml_v1 }})

    parser = ArgumentParser()
    {{ args }}
    args = parser.parse_args()

    {{ body }}


if __name__ == "__main__":
    main()
